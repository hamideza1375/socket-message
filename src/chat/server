const jwt = require('jsonwebtoken');
const { createServer } = require("http");
const { Server } = require("socket.io");
const express = require('express');
const app = express();
const port = 80;
const httpServer = createServer(app);
const io = new Server(httpServer, { cors: { origin: "http://localhost:3000" } });


var fs = require('fs');
const appRoot = require("app-root-path");
const mongoose = require('mongoose');
const fileUpload = require("express-fileupload");
const winston = require('winston');
const { setHeaders } = require("./middleware/headers");
const User = require("./router/UserRouter");
const { PvMessageModels } = require('./model/PvMessageModels');
const ErrorMiddleware = require('./middleware/Error');



winston.add(new winston.transports.File({ filename: 'error-log.log' }));

process.on('uncaughtException', (err) => { console.log(err); winston.error(err.message); });
process.on('unhandledRejection', (err) => { console.log(err); winston.error(err.message); });

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(setHeaders);
app.use(express.static("public"));
app.use(express.static("node_modules"));

app.use(fileUpload());
app.use(ErrorMiddleware);

app.use(User)

app.use((req, res) => { res.send("<h1 style='text-align:center;color:red; font-size:55px'> 404 </h1>"); });


mongoose.connect(
  "mongodb://localhost:27017/chat",
  {
    useNewUrlParser: true, useUnifiedTopology: true
  })
  .then(() => console.log('db connected'))
  .catch((err) => console.error('db not connected', err));

httpServer.listen(port, () => { console.log('conected'); });






let users = [],
  messages = []
io.on("connection", (socket) => {
 

  socket.on("online", async (data) => {
    socket.join('1');
    users.push({ user: data.user, userId: data.userId, socketId: socket.id })
    io.sockets.emit("online", users);
    const msgModel = await PvMessageModels.find().sort({ createdAt: -1 })
    io.sockets.emit("mongoMsg", msgModel);
    console.log("mongoMsg", msgModel);
  });



  socket.on("pvChat", async (data) => {
    try {
      await new PvMessageModels({ message: data.pvMessage, id: socket.id, to: data.to, userId: data.userId, createdAt: new Date(), getTime:  new Date().getTime() }).save()
      const messages = await PvMessageModels.find().sort({ createdAt: -1 })
    console.log("mongoMsg", messages);
      if (data.to !== '1') {
        io.sockets.emit("pvChat", data, users, messages);
      } else {
        io.to('1').emit("pvChat", data, users, messages);
      }
    } catch (err) { console.log(err); }

  });



  socket.on("delRemove", () => {
    try {
      const user = socket.handshake.auth.token
      users = users.filter((u) => u.userId !== user)
      io.sockets.emit("online", users);
    } catch (err) { console.log(err); }
  })



  socket.on("disconnect", () => {
    try {
      const user = socket.handshake.auth.token
      if (user) {
        users = users.filter((u) => u.userId !== user)
        io.sockets.emit("online", users);
      }
    } catch (err) { console.log(err); }
  })

});
